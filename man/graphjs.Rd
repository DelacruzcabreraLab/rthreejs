% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph.R
\name{graphjs}
\alias{graphjs}
\title{Interactive 3D Graph Visualization}
\usage{
graphjs(g, layout, vertex.color, vertex.size, vertex.shape, vertex.label,
  edge.color, edge.width, edge.alpha, main = "", bg = "white",
  width = NULL, height = NULL, ...)
}
\arguments{
\item{g}{an \code{\link{igraph}} graph object or a list of \code{igraph} objects (see notes)}

\item{layout}{optional graph layout or list of layouts (see notes)}

\item{vertex.color}{optional vertex color or vector of colors as long as the number of vertices in \code{g}}

\item{vertex.size}{optional vertex size or vector of sizes}

\item{vertex.shape}{optional vertex shape or vector of shapes}

\item{vertex.label}{optional vertex label or vector of labels}

\item{edge.color}{optional edge color or vector of colors as long as the number of edges in \code{g}}

\item{edge.width}{optional edge width or vector of edge widths}

\item{edge.alpha}{optional single numeric edge transparency value}

\item{main}{plot title text}

\item{bg}{plot background color}

\item{width}{the widget container \code{div} width in pixels}

\item{height}{the widget container \code{div} height in pixels}

\item{...}{optional additional arguments passed to \code{\link{scatterplot3js}}}
}
\value{
An htmlwidget object that is displayed using the object's show or print method.
(If you don't see your widget plot, try printing it with the \code{print}) function.
}
\description{
Make interactive 3D plots of \code{\link{igraph}} objects.
}
\note{
Edge transparency values specified as part of \code{edge.color} are ignored, however
you can set an overall transparency for edges with \code{edge.alpha}.
}
\section{Interacting with the plot}{

Press and hold the left mouse button (or touch or trackpad equivalent) and move
the mouse to rotate the plot. Press and hold the right mouse button (or touch
equivalent) to pan. Use the mouse scroll wheel or touch equivalent to zoom.
If \code{vertex.label}s are specified (see below), moving the mouse pointer over
a point will display the label.
}

\section{Layout options}{

Use the \code{layout} parameter to control the visualization layout by supplying
either a three-column matrix of vertex \code{x, y, z} coordinates, or a function
that returns such a layout. The igraph \code{\link{layout_with_fr}} force-directed
layout is used by default (note that only 3D layouts are supported). Also see
the animation section below.
}

\section{Vertex options}{

Optional parameters beginning with \code{vertex.} represent a subset of the igraph package
vertex visualization options and work similarly, see \code{link{igraph.plotting}}.
Vertex shapes in \code{graphjs} act somewhat differently, and are mapped to the
\code{pch} option in \code{\link{scatterplot3js}}. In particular, \code{pch}
character symbols or even short text strings may be specified. The \code{vertex.label}
option enables a mouse-over label display instead of plotting lables directly near the vertices.
(Consider using the text \code{pch} options for that instead.)
}

\section{Edge options}{

Optional parameters beginning with \code{edge.} represent a subset of the igraph
edge visualization options and work similarly as the \code{vertex.} options above.
}

\section{Graph animation}{

Specifying a list of three-column layout matrices in \code{layout} displays
a linear interpolation from one layout to the next, providing a simple mechanism
for graph animation. Each layout must have the same number of rows as the number
of vertices in the graph.
Specify the optional \code{fpl} (frames per layout) parameter to control the
number of interpolating animation frames between layouts. See the examples.

Optionally specify a list of graph objects in \code{g} to vary the displayed edges
and edge colors from one layout to the next, with the restriction that each graph
object must refer to a uniform number of vertices.
}

\section{Click animation}{

Specify the option \code{click=list} to animate the graph when specified vertices
are clicked interactively, where \code{list} is a named list of animation entries.
Each entry must itself be a list of a igraph object with the same number of
vertices as \code{g} and optionally specifying \code{vertex.color}, \code{layout},
and \code{edge.color} (either in the graph object or separately in the list).
Each animation list entry must be named by a number corresponding to the vertex
enumeration in \code{g}. An animation sequence is triggered when a corresponding
vertex is clicked. Note that the layouts specified in each animation entry are
not automatically scaled in order to preserve coordinate positions. That means
that they must be manually scaled so that each coordinate lies in the range
\code{[-1, 1]}. See the example below.
}
\examples{
set.seed(1)
g <- sample_islands(3, 10, 5/10, 1)
i <- cluster_optimal(g)
(graphjs(g, vertex.color=c("orange", "green", "blue")[i$membership], vertex.shape="sphere"))

# Les Miserables Character Co-appearance Data
data("LeMis")
(graphjs(LeMis))

# ...plot Character names
(graphjs(LeMis, vertex.shape=V(LeMis)$label))

# SNAP Facebook ego network dataset (a nice medium-sized network)
data("ego")
(graphjs(ego, bg="black"))

\dontrun{
# A graph amination that shows several layouts
data("LeMis")
graphjs(LeMis,
  layout=list(
    layout_randomly(LeMis, dim=3),
    layout_on_sphere(LeMis),
    layout_with_drl(LeMis, dim=3),  # note! somewhat slow...
    layout_with_fr(LeMis, dim=3, niter=30)),
  main=list("random layout", "sphere layout", "drl layout", "fr layout"),
  fpl=300)

# A simple graph animation illustrating edge modification
g <- make_ring(5) - edges(1:5)
graph_list <- list(
 g + edge(1, 2),
 g + edge(1, 2) + edge(2, 3),
 g + edge(1, 2) + edge(2, 3) + edge(3, 4),
 g + edge(1, 2) + edge(2, 3) + edge(3, 4) + edge(4, 5),
 g + edge(1, 2) + edge(2, 3) + edge(3, 4) + edge(4, 5) + edge(5, 1))
 graphjs(graph_list, main=paste(1:5),
   vertex.color=rainbow(5), vertex.shape="sphere", edge.width=3)

# A graph with click-triggered animation (click on the main vertices).
data(LeMis)
N  <- length(V(LeMis))
pr <- page_rank(LeMis)$vector
# Vertex cluster membership
cl <- unclass(membership(cluster_louvain(LeMis)))
# order the page rank values
i <- order(pr, decreasing=TRUE)
# Find the index of the highest page rank vertex in each cluster
idx <- aggregate(seq(1:N)[i], by=list(cl[i]), FUN=head, 1)$x
# Create a default force-directed layout for the whole networl
ld <- norm_coords(layout_with_fr(LeMis, dim=3))
# Collapse the layout to just the idx vertices
lo <- Reduce(rbind,Map(function(i) ld[idx[i],], cl))
# Create grouped vertex colors, setting all but idx vertices transparent
col <- rainbow(length(idx), alpha=0)[cl]
col[idx] <- rainbow(length(idx), alpha=1)
# animation layouts, one for each of the idx vertices
# animation color schemes, one scheme for each idx vertex
click <- Map(function(i)
{
  x <- lo
  x[cl == i, ] <- ld[cl == i, ]
  c <- col
  c[cl == i] <- rainbow(length(idx), alpha=1)[i]
  list(layout=x, vertex.color=c)
}, seq(idx))
names(click) <- paste(idx)
graphjs(LeMis, layout=lo, click=click, vertex.color=col, fps=20, font.main="96px Arial")

}

}
\references{
The three.js project \url{http://threejs.org}.
}
\seealso{
\code{\link{igraph.plotting}}, \code{\link{scatterplot3js}}
}

